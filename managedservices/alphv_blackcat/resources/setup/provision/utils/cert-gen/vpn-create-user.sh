#!/usr/bin/env bash
# ------------------------------------------------------------------
# [Author] mbutt / infra team
#          * Requires Certificate Authority key and certificate to be associated with AWS Client VPN
#
#          Using the base OpenVPN configuration generated by the cloud provider (e.g. AWS), this script
#          will download the profile, make any necessary modifications (e.g. add friendly name, add keepalive),
#          generate client certificate and associated keys, and sign the certificates with the CA key so they
#          will be considered valid.
#
# ------------------------------------------------------------------

# script meta
SUBJECT=vpn-create-user
VERSION=1.1.0
USAGE="Usage: vpn-create-user"

# space separated list of unique user names
USERS="operator1 operator2 operator3"

# global timestamp variable
TIMESTAMP=$(date +'%Y%m%d%H%M')

# working dir to keep things clean
WORKING_PREFIX_DIR="messy"

# configuration
EVAL_PREFIX="msr2"
USER_DIR="${EVAL_PREFIX}-vpn"
# PASSWORD="Aep1guu3" # not used

echoerr() { printf "%s\n" "$*" >&2; }
info()    { echoerr "[INFO]    $*"; }
warning() { echoerr "[WARNING] $*"; }
error()   { echoerr "[ERROR]   $*"; }
fatal()   {
  echoerr "[FATAL]   $*"
  exit 1
}

# client certs
CLIENT_KEY_FILE="client.key"
CLIENT_CRT_FILE="client.crt"
PUBLISH_ROOT_DIR="publish"
PUBLISH_INTERNAL_DIR="${PUBLISH_ROOT_DIR}/internal"
PUBLISH_VENDOR_DIR="${PUBLISH_ROOT_DIR}/vendor"
CLIENT_CRT_OUTPUT_DIR="${PUBLISH_ROOT_DIR}/crt-files"

# vendor name argument maps to RANGE_NAME variable
RANGE_NAME=""
RANGE_TYPE=""
PRETTY_RANGE_TYPE=""
BASE_VPN_CFG=""
AWS_VPN_ENDPOINT_ID=""
CA_CERT_KEY_FILE=""
CA_CERT_PEM_FILE=""

############################################################
# Help                                                     #
############################################################
help() {
  # Display Help
  echo "Generate VPN configuration profiles for the specified range. Vendor name, and range type (either detection or protection), must be specified."
  echo "Certificate and key assumed to be on disk, used to sign client certificates for VPN profiles. "
  echo
  echo "Currently requires CVPN ID and active AWS login to use. "
  echo
  echo "Syntax: vpn-create-user.sh -v VENDOR_NAME -[d|p|m] [-e CVPN_ID] [-c CERT_FILE] [-k KEY_FILE] [-h]"
  echo "options:"
  echo "   -h     Print this Help."
  echo "   -v     Vendor name."
  echo "   -d     Detections range type."
  echo "   -p     Protections range type."
  echo "   -m     Managed Services range type."
  echo "   -e     AWS Client VPN endpoint ID (e.g. cvpn-endpoint-xyzabc)."
  echo "   -c     Specify path to CA certificate file (in PEM format) to use. By default ${CA_CERT_PEM_FILE} is used."
  echo "   -k     Specify path to CA private key, which matches CA certificate to use. By default ${CA_CERT_KEY_FILE} is used."
  echo
  echo
}

############################################################
# Handle command line args                                 #
# -- colon after option name means option takes args       #
############################################################
while getopts ":hv:dpme:c:k:" option; do
  case $option in
  h) # display Help
    help
    exit
    ;;
  v) # Enter a vendor name
    RANGE_NAME=$OPTARG
    ;;
  d) # detections type
    RANGE_TYPE="detections"
    PRETTY_RANGE_TYPE="Detections"
    ;;
  p)
    RANGE_TYPE="protections"
    PRETTY_RANGE_TYPE="Protections"
    ;;
  m)
    RANGE_TYPE="msr2"
    PRETTY_RANGE_TYPE="ManagedServices"
    ;;
  e)
    AWS_VPN_ENDPOINT_ID=$OPTARG
    ;;
  c)
    info "using custom CA certificate pem file..."
    CA_CERT_PEM_FILE="$OPTARG"
    ;;
  k)
    info "using custom CA key file..."
    CA_CERT_KEY_FILE="$OPTARG"
    ;;
  \?) # Invalid option
    error "Invalid option"
    exit
    ;;
  esac
done

# Early exit if vendors are not provided
if [[ ! "${RANGE_NAME}" ]]; then
  fatal "Please provide vendor names (option -v)"
fi

info "Creating VPN users: $USERS"
info "To configure, please change the value of the USERS list in this file"

############################################################
# Globals                                                  #
############################################################

# oVPN files
OVPN_FILE="OpenVPN_vpnconfig.ovpn"
OVPN_FILE_USER="OpenVPN"

# ca certs
CA_CERT_DIR='out/keys'

if [[ ! "${CA_CERT_PEM_FILE}" ]]; then
  info "Using default public cert file for CA..."
  CA_CERT_PEM_FILE="${CA_CERT_DIR}/${RANGE_NAME}-caCert.pem"
fi

# tmp directory used during profile generation to reduce clutter. safe to delete directory after successful script execution.
TMP_PROFILE_WORKING_DIR="${WORKING_PREFIX_DIR}/tmp-working-${RANGE_NAME}-${RANGE_TYPE}-${TIMESTAMP}"

# Directory that will contain the zipped profiles for all users
PROFILE_OUTPUT_DIRECTORY="${WORKING_PREFIX_DIR}/vpn-profiles-${RANGE_NAME}-${RANGE_TYPE}-${TIMESTAMP}"

############################################################
# Main functions                                           #
############################################################
ensure_cert_dir_exists() {
  info "creating certificate directory: ${CA_CERT_DIR}"
  mkdir -p "${CA_CERT_DIR}"
}

make_output_dirs() {
  # create tmp and output directories
  info "Making output directories"
  mkdir -p ${PUBLISH_INTERNAL_DIR}
  mkdir -p ${PUBLISH_VENDOR_DIR}
  mkdir -p "${TMP_PROFILE_WORKING_DIR}"
  mkdir -p "${PROFILE_OUTPUT_DIRECTORY}"
  mkdir -p "${CLIENT_CRT_OUTPUT_DIR}"
  info "Zipped profiles for internal employees will be placed in ${PUBLISH_INTERNAL_DIR}"
  info "Zipped profiles for vendors will be placed in ${PUBLISH_VENDOR_DIR}"
}

check_cert_on_disk() {
  info "Validating cert export was successful"
  # If unable to pull the cert exit. No use moving on.
  if ! [ -s "${CA_CERT_PEM_FILE}" ]; then
    fatal "$CA_CERT_PEM_FILE does not exist."
    exit 1
  fi
}

aws_cleanup_vpn_cfg() {
  # cleanup vpn profile that was downloaded from AWS
  info "cleaning up $1"
  # add a random string at the beginning of the hostname
  gsed -i "4s/remote /remote ${RANGE_NAME}\./" "$1"
  gsed -i '/^verb 3.*/a keepalive 0 0' "$1"
  gsed -i '/^keepalive.*/a setenv FRIENDLY_NAME "@@USER@@ range vpn"' "$1"
  cat <<'ADDCERTEOL' >> "$1"
# P2S client certificate
<cert>
$CLIENTCERTIFICATE
</cert>

# P2S client certificate private key
<key>
$PRIVATEKEY
</key>
ADDCERTEOL
  dos2unix "$1"
  info "Done with the fixing of the vpn configuration files..."
}

aws_download_vpn_base_profile() {
  # download
  info "Downloading VPN profile from AWS via aws cli (requires active aws login session)"
  info "Endpoint ID: ${AWS_VPN_ENDPOINT_ID}"

  # put config in place and clean it up
  aws ec2 export-client-vpn-client-configuration --client-vpn-endpoint-id "${AWS_VPN_ENDPOINT_ID}" --output text > ${OVPN_FILE}
  aws_cleanup_vpn_cfg ${OVPN_FILE}
  BASE_VPN_CFG=${OVPN_FILE}
}

create_profiles() {
  info "Creating profiles loop start"
  for user in ${USERS}; do
    PROFILE_DIR="${TMP_PROFILE_WORKING_DIR}/${USER_DIR}-${RANGE_NAME}-${user}"
    mkdir -p "${PROFILE_DIR}"
    cp -af "${BASE_VPN_CFG}" "${PROFILE_DIR}"/${OVPN_FILE}
    ipsec pki --gen --outform pem >"${PROFILE_DIR}"/${CLIENT_KEY_FILE}
    ipsec pki --pub --in "${PROFILE_DIR}"/${CLIENT_KEY_FILE} | ipsec pki --issue --cacert "${CA_CERT_PEM_FILE}" --cakey "${CA_CERT_KEY_FILE}" --dn "CN=${RANGE_TYPE}-${user}" --san "${RANGE_TYPE}-${user}" --flag clientAuth --outform pem >"${PROFILE_DIR}"/${CLIENT_CRT_FILE}
    export PRIVATEKEY=$(<"${PROFILE_DIR}"/${CLIENT_KEY_FILE})
    export CLIENTCERTIFICATE=$(<"${PROFILE_DIR}"/${CLIENT_CRT_FILE})
    envsubst <"${PROFILE_DIR}"/${OVPN_FILE} >"${PROFILE_DIR}"/${OVPN_FILE}.tmp
    mv -f "${PROFILE_DIR}"/${OVPN_FILE}.tmp "${PROFILE_DIR}"/"${RANGE_NAME}"_${RANGE_TYPE}_${OVPN_FILE_USER}_"${user}".ovpn
    gsed -i "s/@@USER@@/${RANGE_TYPE}-${user}-${RANGE_NAME}/g" "${PROFILE_DIR}"/"${RANGE_NAME}"_${RANGE_TYPE}_${OVPN_FILE_USER}_"${user}".ovpn
    zip -j -X "${PROFILE_OUTPUT_DIRECTORY}"/"${RANGE_NAME}"_${RANGE_TYPE}_${OVPN_FILE_USER}_"${user}".ovpn.zip "${PROFILE_DIR}"/"${RANGE_NAME}"_${RANGE_TYPE}_${OVPN_FILE_USER}_"${user}".ovpn
    # copy crt files for crl generation
    cp -af "${PROFILE_DIR}"/${CLIENT_CRT_FILE} "${CLIENT_CRT_OUTPUT_DIR}"/"${RANGE_TYPE}-${RANGE_NAME}-${user}-${CLIENT_CRT_FILE}"
  done
  info "Done creating profiles"
}

organize_vendor_profiles() {
  # put all vendor profile directories in common place to make easier to send out
  # mkdir for vendor profiles
  info "Organizing vendor and internal VPN profiles"
  mkdir "${PROFILE_OUTPUT_DIRECTORY}"/"${RANGE_NAME}"_VPN_Profiles_${PRETTY_RANGE_TYPE}
  cp -af "${PROFILE_OUTPUT_DIRECTORY}"/*"${RANGE_NAME}"_${RANGE_TYPE}*.zip "${PROFILE_OUTPUT_DIRECTORY}"/"${RANGE_NAME}"_VPN_Profiles_${PRETTY_RANGE_TYPE}/
  cp -af "${PROFILE_OUTPUT_DIRECTORY}"/"${RANGE_NAME}"*vendor* ${PUBLISH_VENDOR_DIR}/
  cp -af "${PROFILE_OUTPUT_DIRECTORY}"/"${RANGE_NAME}"*{bluelab,infra,operator}* ${PUBLISH_INTERNAL_DIR}/
  info "Profiles copied to ${PUBLISH_ROOT_DIR} subdirectories, filtered by profile type (vendor or internal user)"
}

copy_crt_files_to_ref_dir() {
  info "copying vendor crt vpn files to common dir for crl generation"
  mkdir -p "${CLIENT_CRT_OUTPUT_DIR}"
}

vpn_main() {
  # run everything
  info "Starting creation of vpn profile execution"
  check_cert_on_disk
  make_output_dirs
  aws_download_vpn_base_profile
  create_profiles
  organize_vendor_profiles
}

vpn_main
