#include "crypto/djb2.hpp"
#include "crypto/encryption.hpp"
#include "crypto/xor.hpp"
#include <gtest/gtest.h>
#include <tuple>
#include <vector>

TEST(CryptoTests, TestDjb2Hash) {
    // Generated using https://www.convertcase.com/hashing/djb-hash-calculator
    std::vector<std::tuple<std::string, unsigned long>> test_suites = {
        std::tuple<std::string, unsigned long>("Hello", 0x0d4f2079),
        std::tuple<std::string, unsigned long>("test", 0x7c9e6865),
        std::tuple<std::string, unsigned long>("GetComputerNameW", 0xaa63bfcc),  
        std::tuple<std::string, unsigned long>("1", 0x0002b5d6),  
        std::tuple<std::string, unsigned long>("K", 0x0002b5f0),
        std::tuple<std::string, unsigned long>("somewhat long string with spaces and other symbols!@#", 0xd973a4b1)
    };

    for (auto& t: test_suites) {
        EXPECT_EQ(std::get<1>(t), djb2::djb2(std::get<0>(t).c_str()));
    }
}

TEST(CryptoTests, TestDjb2CaseInsensitiveHash) {
    // Generated using https://www.convertcase.com/hashing/djb-hash-calculator
    EXPECT_EQ(0x7c9e6865, djb2::djb2_case_insensitive("TEST"));
    EXPECT_EQ(0x7c9e6865, djb2::djb2_case_insensitive("tEST"));
    EXPECT_EQ(0x7c9e6865, djb2::djb2_case_insensitive("test"));
    EXPECT_EQ(0x7c9e6865, djb2::djb2_case_insensitive("tesT"));
    EXPECT_EQ(0x0002b5d6, djb2::djb2_case_insensitive("1"));
    EXPECT_EQ(0xd973a4b1, djb2::djb2_case_insensitive("somewhat long string with spaces and other symbols!@#"));
    EXPECT_EQ(0xd973a4b1, djb2::djb2_case_insensitive("SOMEWHAT long STRing with spaces aNd other SYMBOls!@#"));
}

TEST(CryptoTests, TestDjb2StrEq) { 
    EXPECT_TRUE(djb2::StrEqDJB2("GetComputerNameW", 0xaa63bfcc, 'G'));
    EXPECT_FALSE(djb2::StrEqDJB2("GetComputerNameW", 0xaa63bfcc, 'g'));
    EXPECT_FALSE(djb2::StrEqDJB2("GetComputerNameW", 0xaa63bfcb, 'G'));

    // Using known collisions
    EXPECT_EQ(djb2::djb2("mentioner"), djb2::djb2("hetairas"));
    EXPECT_TRUE(djb2::StrEqDJB2("mentioner", 0xead8f516, 'm'));
    EXPECT_FALSE(djb2::StrEqDJB2("mentioner", 0xead8f516, 'h'));
    EXPECT_TRUE(djb2::StrEqDJB2("hetairas", 0xead8f516, 'h'));
    EXPECT_FALSE(djb2::StrEqDJB2("hetairas", 0xead8f516, 'm'));

    EXPECT_EQ(djb2::djb2("depravement"), djb2::djb2("serafins"));
    EXPECT_TRUE(djb2::StrEqDJB2("depravement", 0x0d00ffc0, 'd'));
    EXPECT_FALSE(djb2::StrEqDJB2("depravement", 0x0d00ffc0, 's'));
    EXPECT_TRUE(djb2::StrEqDJB2("serafins", 0x0d00ffc0, 's'));
    EXPECT_FALSE(djb2::StrEqDJB2("serafins", 0x0d00ffc0, 'd'));
}

TEST(CryptoTests, TestXorInPlace) {
    std::vector<unsigned char> key = {
        0x59, 0x34, 0x18, 0xa2, 0xc4, 0xff, 0x03, 0x7d, 0xc0, 0xee, 0x92, 0x7b, 0x2d, 0xbd, 0x96, 0x50
    };
    std::vector<unsigned char> buffer = {
        0x49, 0x27, 0xdd, 0x0c, 0xfa, 0x84, 0x5b, 0x5a, 0x49, 0xc5, 0x14, 0x74, 0xf6, 0x0b, 0x17, 0xd4, 
        0x9c, 0x75, 0x49, 0x5f, 0xf9, 0x75, 0xe1, 0xeb, 0x3a, 0x6b, 0xf2, 0xb1, 0x8e, 0xed, 0xcc, 0xe9, 
        0x00, 0x15, 0x99, 0x48, 0xc2, 0x2e, 0xa8, 0x7b, 0xc3, 0x43, 0xdc, 0xbc, 0x07, 0x58, 0xb8, 0x48, 
        0xb6, 0x73, 0xe2, 0x16, 0xed, 0x40, 0x9c, 0x2f, 0x61, 0x16, 0x38, 0xdf, 0xcd, 0xb7, 0x9a, 0x88, 
        0x4d, 0x9a, 0xbd, 0xae, 0x1c, 0x29, 0x56, 0x7b, 0x20, 0x4c, 0x1f, 0x62, 0x28, 0xfd, 0x0b, 0x45, 
        0x7f, 0xe0, 0x14, 0xe3, 0x2c, 0x6c, 0xc5, 0x2b, 0xb6, 0x8f, 0xc7, 0x98, 0x47, 0x4c, 0x6b, 0x81, 
        0x71, 0x01, 0x29, 0xa3, 0x84, 0xa7, 0x3f, 0x3c, 0x86, 0xc4, 0x69, 0xfc, 0x67, 0xd3, 0x38, 0x1a, 
        0x66, 0xd6, 0x96, 0xe4, 0xca, 0xae, 0x84, 0x9b, 0x8d, 0x86, 0x0b, 0xce, 0xe5, 0x3e, 0xed, 0x5a
    };
    std::vector<unsigned char> original(buffer.begin(), buffer.end());
    std::vector<unsigned char> want = {
        0x10,0x13,0xc5,0xae,0x3e,0x7b,0x58,0x27,0x89,0x2b,0x86,0x0f,0xdb,0xb6,0x81,0x84,
        0xc5,0x41,0x51,0xfd,0x3d,0x8a,0xe2,0x96,0xfa,0x85,0x60,0xca,0xa3,0x50,0x5a,0xb9,
        0x59,0x21,0x81,0xea,0x06,0xd1,0xab,0x06,0x03,0xad,0x4e,0xc7,0x2a,0xe5,0x2e,0x18,
        0xef,0x47,0xfa,0xb4,0x29,0xbf,0x9f,0x52,0xa1,0xf8,0xaa,0xa4,0xe0,0x0a,0x0c,0xd8,
        0x14,0xae,0xa5,0x0c,0xd8,0xd6,0x55,0x06,0xe0,0xa2,0x8d,0x19,0x05,0x40,0x9d,0x15,
        0x26,0xd4,0x0c,0x41,0xe8,0x93,0xc6,0x56,0x76,0x61,0x55,0xe3,0x6a,0xf1,0xfd,0xd1,
        0x28,0x35,0x31,0x01,0x40,0x58,0x3c,0x41,0x46,0x2a,0xfb,0x87,0x4a,0x6e,0xae,0x4a,
        0x3f,0xe2,0x8e,0x46,0x0e,0x51,0x87,0xe6,0x4d,0x68,0x99,0xb5,0xc8,0x83,0x7b,0x0a
    };

    encryption::XorInPlace(&(buffer[0]), buffer.size(), key.data(), key.size());
    EXPECT_EQ(buffer, want);

    encryption::XorInPlace(&(buffer[0]), buffer.size(), key.data(), key.size());
    EXPECT_EQ(buffer, original);
}

TEST(CryptoTests, TestGetXorKeyBytes) {
    std::vector<unsigned char> want = {
        0x59, 0x34, 0x18, 0xa2, 0xc4, 0xff, 0x03, 0x7d, 0xc0, 0xee, 0x92, 0x7b, 0x2d, 0xbd, 0x96, 0x50
    };
    EXPECT_EQ(want, encryption::GetXorKeyBytes("593418a2c4ff037dc0ee927b2dbd9650"));
}
