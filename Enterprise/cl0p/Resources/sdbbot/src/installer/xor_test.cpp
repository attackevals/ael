#include <gtest/gtest.h>
#include <array>
#include "xor.hpp"

TEST(XorTests, TestXorVectorInPlace) {
    std::vector<unsigned char> key = {
        0x59, 0x34, 0x18, 0xa2, 0xc4, 0xff, 0x03, 0x7d, 0xc0, 0xee, 0x92, 0x7b, 0x2d, 0xbd, 0x96, 0x50
    };
    std::vector<unsigned char> buffer = {
        0x49, 0x27, 0xdd, 0x0c, 0xfa, 0x84, 0x5b, 0x5a, 0x49, 0xc5, 0x14, 0x74, 0xf6, 0x0b, 0x17, 0xd4, 
        0x9c, 0x75, 0x49, 0x5f, 0xf9, 0x75, 0xe1, 0xeb, 0x3a, 0x6b, 0xf2, 0xb1, 0x8e, 0xed, 0xcc, 0xe9, 
        0x00, 0x15, 0x99, 0x48, 0xc2, 0x2e, 0xa8, 0x7b, 0xc3, 0x43, 0xdc, 0xbc, 0x07, 0x58, 0xb8, 0x48, 
        0xb6, 0x73, 0xe2, 0x16, 0xed, 0x40, 0x9c, 0x2f, 0x61, 0x16, 0x38, 0xdf, 0xcd, 0xb7, 0x9a, 0x88, 
        0x4d, 0x9a, 0xbd, 0xae, 0x1c, 0x29, 0x56, 0x7b, 0x20, 0x4c, 0x1f, 0x62, 0x28, 0xfd, 0x0b, 0x45, 
        0x7f, 0xe0, 0x14, 0xe3, 0x2c, 0x6c, 0xc5, 0x2b, 0xb6, 0x8f, 0xc7, 0x98, 0x47, 0x4c, 0x6b, 0x81, 
        0x71, 0x01, 0x29, 0xa3, 0x84, 0xa7, 0x3f, 0x3c, 0x86, 0xc4, 0x69, 0xfc, 0x67, 0xd3, 0x38, 0x1a, 
        0x66, 0xd6, 0x96, 0xe4, 0xca, 0xae, 0x84, 0x9b, 0x8d, 0x86, 0x0b, 0xce, 0xe5, 0x3e, 0xed, 0x5a
    };
    std::vector<unsigned char> original(buffer.begin(), buffer.end());
    std::vector<unsigned char> want = {
        0x10,0x13,0xc5,0xae,0x3e,0x7b,0x58,0x27,0x89,0x2b,0x86,0x0f,0xdb,0xb6,0x81,0x84,
        0xc5,0x41,0x51,0xfd,0x3d,0x8a,0xe2,0x96,0xfa,0x85,0x60,0xca,0xa3,0x50,0x5a,0xb9,
        0x59,0x21,0x81,0xea,0x06,0xd1,0xab,0x06,0x03,0xad,0x4e,0xc7,0x2a,0xe5,0x2e,0x18,
        0xef,0x47,0xfa,0xb4,0x29,0xbf,0x9f,0x52,0xa1,0xf8,0xaa,0xa4,0xe0,0x0a,0x0c,0xd8,
        0x14,0xae,0xa5,0x0c,0xd8,0xd6,0x55,0x06,0xe0,0xa2,0x8d,0x19,0x05,0x40,0x9d,0x15,
        0x26,0xd4,0x0c,0x41,0xe8,0x93,0xc6,0x56,0x76,0x61,0x55,0xe3,0x6a,0xf1,0xfd,0xd1,
        0x28,0x35,0x31,0x01,0x40,0x58,0x3c,0x41,0x46,0x2a,0xfb,0x87,0x4a,0x6e,0xae,0x4a,
        0x3f,0xe2,0x8e,0x46,0x0e,0x51,0x87,0xe6,0x4d,0x68,0x99,0xb5,0xc8,0x83,0x7b,0x0a
    };

    xor_crypt::XorInPlace(buffer.data(), buffer.size(), key);
    EXPECT_EQ(buffer, want);

    xor_crypt::XorInPlace(buffer.data(), buffer.size(), key);
    EXPECT_EQ(buffer, original);
}

TEST(XorTests, TestXorArrayInPlace) {
    std::vector<unsigned char> key = {
        0x59, 0x34, 0x18, 0xa2, 0xc4, 0xff, 0x03, 0x7d, 0xc0, 0xee, 0x92, 0x7b, 0x2d, 0xbd, 0x96, 0x50
    };
    std::array<std::byte, 128> buffer = {
        std::byte{0x49}, std::byte{0x27}, std::byte{0xdd}, std::byte{0x0c}, std::byte{0xfa}, std::byte{0x84}, std::byte{0x5b}, std::byte{0x5a}, std::byte{0x49}, std::byte{0xc5}, std::byte{0x14}, std::byte{0x74}, std::byte{0xf6}, std::byte{0x0b}, std::byte{0x17}, std::byte{0xd4}, 
        std::byte{0x9c}, std::byte{0x75}, std::byte{0x49}, std::byte{0x5f}, std::byte{0xf9}, std::byte{0x75}, std::byte{0xe1}, std::byte{0xeb}, std::byte{0x3a}, std::byte{0x6b}, std::byte{0xf2}, std::byte{0xb1}, std::byte{0x8e}, std::byte{0xed}, std::byte{0xcc}, std::byte{0xe9}, 
        std::byte{0x00}, std::byte{0x15}, std::byte{0x99}, std::byte{0x48}, std::byte{0xc2}, std::byte{0x2e}, std::byte{0xa8}, std::byte{0x7b}, std::byte{0xc3}, std::byte{0x43}, std::byte{0xdc}, std::byte{0xbc}, std::byte{0x07}, std::byte{0x58}, std::byte{0xb8}, std::byte{0x48}, 
        std::byte{0xb6}, std::byte{0x73}, std::byte{0xe2}, std::byte{0x16}, std::byte{0xed}, std::byte{0x40}, std::byte{0x9c}, std::byte{0x2f}, std::byte{0x61}, std::byte{0x16}, std::byte{0x38}, std::byte{0xdf}, std::byte{0xcd}, std::byte{0xb7}, std::byte{0x9a}, std::byte{0x88}, 
        std::byte{0x4d}, std::byte{0x9a}, std::byte{0xbd}, std::byte{0xae}, std::byte{0x1c}, std::byte{0x29}, std::byte{0x56}, std::byte{0x7b}, std::byte{0x20}, std::byte{0x4c}, std::byte{0x1f}, std::byte{0x62}, std::byte{0x28}, std::byte{0xfd}, std::byte{0x0b}, std::byte{0x45}, 
        std::byte{0x7f}, std::byte{0xe0}, std::byte{0x14}, std::byte{0xe3}, std::byte{0x2c}, std::byte{0x6c}, std::byte{0xc5}, std::byte{0x2b}, std::byte{0xb6}, std::byte{0x8f}, std::byte{0xc7}, std::byte{0x98}, std::byte{0x47}, std::byte{0x4c}, std::byte{0x6b}, std::byte{0x81}, 
        std::byte{0x71}, std::byte{0x01}, std::byte{0x29}, std::byte{0xa3}, std::byte{0x84}, std::byte{0xa7}, std::byte{0x3f}, std::byte{0x3c}, std::byte{0x86}, std::byte{0xc4}, std::byte{0x69}, std::byte{0xfc}, std::byte{0x67}, std::byte{0xd3}, std::byte{0x38}, std::byte{0x1a}, 
        std::byte{0x66}, std::byte{0xd6}, std::byte{0x96}, std::byte{0xe4}, std::byte{0xca}, std::byte{0xae}, std::byte{0x84}, std::byte{0x9b}, std::byte{0x8d}, std::byte{0x86}, std::byte{0x0b}, std::byte{0xce}, std::byte{0xe5}, std::byte{0x3e}, std::byte{0xed}, std::byte{0x5a}
    };
    std::array<std::byte, 128> original = {
        std::byte{0x49}, std::byte{0x27}, std::byte{0xdd}, std::byte{0x0c}, std::byte{0xfa}, std::byte{0x84}, std::byte{0x5b}, std::byte{0x5a}, std::byte{0x49}, std::byte{0xc5}, std::byte{0x14}, std::byte{0x74}, std::byte{0xf6}, std::byte{0x0b}, std::byte{0x17}, std::byte{0xd4}, 
        std::byte{0x9c}, std::byte{0x75}, std::byte{0x49}, std::byte{0x5f}, std::byte{0xf9}, std::byte{0x75}, std::byte{0xe1}, std::byte{0xeb}, std::byte{0x3a}, std::byte{0x6b}, std::byte{0xf2}, std::byte{0xb1}, std::byte{0x8e}, std::byte{0xed}, std::byte{0xcc}, std::byte{0xe9}, 
        std::byte{0x00}, std::byte{0x15}, std::byte{0x99}, std::byte{0x48}, std::byte{0xc2}, std::byte{0x2e}, std::byte{0xa8}, std::byte{0x7b}, std::byte{0xc3}, std::byte{0x43}, std::byte{0xdc}, std::byte{0xbc}, std::byte{0x07}, std::byte{0x58}, std::byte{0xb8}, std::byte{0x48}, 
        std::byte{0xb6}, std::byte{0x73}, std::byte{0xe2}, std::byte{0x16}, std::byte{0xed}, std::byte{0x40}, std::byte{0x9c}, std::byte{0x2f}, std::byte{0x61}, std::byte{0x16}, std::byte{0x38}, std::byte{0xdf}, std::byte{0xcd}, std::byte{0xb7}, std::byte{0x9a}, std::byte{0x88}, 
        std::byte{0x4d}, std::byte{0x9a}, std::byte{0xbd}, std::byte{0xae}, std::byte{0x1c}, std::byte{0x29}, std::byte{0x56}, std::byte{0x7b}, std::byte{0x20}, std::byte{0x4c}, std::byte{0x1f}, std::byte{0x62}, std::byte{0x28}, std::byte{0xfd}, std::byte{0x0b}, std::byte{0x45}, 
        std::byte{0x7f}, std::byte{0xe0}, std::byte{0x14}, std::byte{0xe3}, std::byte{0x2c}, std::byte{0x6c}, std::byte{0xc5}, std::byte{0x2b}, std::byte{0xb6}, std::byte{0x8f}, std::byte{0xc7}, std::byte{0x98}, std::byte{0x47}, std::byte{0x4c}, std::byte{0x6b}, std::byte{0x81}, 
        std::byte{0x71}, std::byte{0x01}, std::byte{0x29}, std::byte{0xa3}, std::byte{0x84}, std::byte{0xa7}, std::byte{0x3f}, std::byte{0x3c}, std::byte{0x86}, std::byte{0xc4}, std::byte{0x69}, std::byte{0xfc}, std::byte{0x67}, std::byte{0xd3}, std::byte{0x38}, std::byte{0x1a}, 
        std::byte{0x66}, std::byte{0xd6}, std::byte{0x96}, std::byte{0xe4}, std::byte{0xca}, std::byte{0xae}, std::byte{0x84}, std::byte{0x9b}, std::byte{0x8d}, std::byte{0x86}, std::byte{0x0b}, std::byte{0xce}, std::byte{0xe5}, std::byte{0x3e}, std::byte{0xed}, std::byte{0x5a}
    };
    std::array<std::byte, 128> want = {
        std::byte{0x10},std::byte{0x13},std::byte{0xc5},std::byte{0xae},std::byte{0x3e},std::byte{0x7b},std::byte{0x58},std::byte{0x27},std::byte{0x89},std::byte{0x2b},std::byte{0x86},std::byte{0x0f},std::byte{0xdb},std::byte{0xb6},std::byte{0x81},std::byte{0x84},
        std::byte{0xc5},std::byte{0x41},std::byte{0x51},std::byte{0xfd},std::byte{0x3d},std::byte{0x8a},std::byte{0xe2},std::byte{0x96},std::byte{0xfa},std::byte{0x85},std::byte{0x60},std::byte{0xca},std::byte{0xa3},std::byte{0x50},std::byte{0x5a},std::byte{0xb9},
        std::byte{0x59},std::byte{0x21},std::byte{0x81},std::byte{0xea},std::byte{0x06},std::byte{0xd1},std::byte{0xab},std::byte{0x06},std::byte{0x03},std::byte{0xad},std::byte{0x4e},std::byte{0xc7},std::byte{0x2a},std::byte{0xe5},std::byte{0x2e},std::byte{0x18},
        std::byte{0xef},std::byte{0x47},std::byte{0xfa},std::byte{0xb4},std::byte{0x29},std::byte{0xbf},std::byte{0x9f},std::byte{0x52},std::byte{0xa1},std::byte{0xf8},std::byte{0xaa},std::byte{0xa4},std::byte{0xe0},std::byte{0x0a},std::byte{0x0c},std::byte{0xd8},
        std::byte{0x14},std::byte{0xae},std::byte{0xa5},std::byte{0x0c},std::byte{0xd8},std::byte{0xd6},std::byte{0x55},std::byte{0x06},std::byte{0xe0},std::byte{0xa2},std::byte{0x8d},std::byte{0x19},std::byte{0x05},std::byte{0x40},std::byte{0x9d},std::byte{0x15},
        std::byte{0x26},std::byte{0xd4},std::byte{0x0c},std::byte{0x41},std::byte{0xe8},std::byte{0x93},std::byte{0xc6},std::byte{0x56},std::byte{0x76},std::byte{0x61},std::byte{0x55},std::byte{0xe3},std::byte{0x6a},std::byte{0xf1},std::byte{0xfd},std::byte{0xd1},
        std::byte{0x28},std::byte{0x35},std::byte{0x31},std::byte{0x01},std::byte{0x40},std::byte{0x58},std::byte{0x3c},std::byte{0x41},std::byte{0x46},std::byte{0x2a},std::byte{0xfb},std::byte{0x87},std::byte{0x4a},std::byte{0x6e},std::byte{0xae},std::byte{0x4a},
        std::byte{0x3f},std::byte{0xe2},std::byte{0x8e},std::byte{0x46},std::byte{0x0e},std::byte{0x51},std::byte{0x87},std::byte{0xe6},std::byte{0x4d},std::byte{0x68},std::byte{0x99},std::byte{0xb5},std::byte{0xc8},std::byte{0x83},std::byte{0x7b},std::byte{0x0a}
    };

    xor_crypt::XorInPlace(&(buffer[0]), buffer.size(), key);
    EXPECT_EQ(buffer, want);

    xor_crypt::XorInPlace(&(buffer[0]), buffer.size(), key);
    EXPECT_EQ(buffer, original);
}

TEST(XorTests, TestGetXorKeyBytes) {
    std::vector<unsigned char> want = {
        0x59, 0x34, 0x18, 0xa2, 0xc4, 0xff, 0x03, 0x7d, 0xc0, 0xee, 0x92, 0x7b, 0x2d, 0xbd, 0x96, 0x50
    };
    EXPECT_EQ(want, xor_crypt::GetXorKeyBytes("593418a2c4ff037dc0ee927b2dbd9650"));
}